// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js / NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User and Profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  orders        Order[]
  subscriptions Subscription[]
  newsletterSubscriptions NewsletterSubscription[]
}

model Profile {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone         String?
  shippingStreet     String?
  shippingCity       String?
  shippingState      String?
  shippingPostalCode String?
  shippingCountry    String?
  billingStreet      String?
  billingCity        String?
  billingState       String?
  billingPostalCode  String?
  billingCountry     String?
  marketingConsent   Boolean @default(true)
  notifications      Boolean @default(true)
}

// Products
model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  longDescription String @db.Text
  price       Decimal  @db.Decimal(10, 2)
  images      String[] // Array of image URLs
  stock       Int
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  ingredients String[]
  allergens   String[]
  weight      Int
  featured    Boolean  @default(false)
  inStock     Boolean  @default(true)
  nutritionalInfo Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
  subscriptionItems SubscriptionItem[]
  collectionProducts CollectionProduct[]
}

// Categories
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Collections for predefined subscription boxes
model Collection {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  image       String?
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  price       Decimal  @db.Decimal(10, 2)
  products    CollectionProduct[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[] // Collections that are part of subscriptions
}

model CollectionProduct {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  productId    String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([collectionId, productId])
}

// Orders
model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  items           OrderItem[]
  shippingAddress Address     @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress  Address     @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Address {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")
}

model PaymentMethod {
  id          String   @id @default(cuid())
  type        String   // e.g., 'card'
  cardBrand   String?  // e.g., 'visa', 'mastercard'
  last4       String?
  expiryMonth Int?
  expiryYear  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

// Subscriptions
model Subscription {
  id            String             @id @default(cuid())
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  status        SubscriptionStatus @default(ACTIVE)
  frequency     Frequency          @default(MONTHLY)
  nextDelivery  DateTime
  items         SubscriptionItem[]
  collectionId  String?           // Optional: If this subscription is based on a predefined collection
  collection    Collection?       @relation(fields: [collectionId], references: [id])
  type          SubscriptionType  @default(CUSTOM)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model SubscriptionItem {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  productId      String
  product        Product      @relation(fields: [productId], references: [id])
  quantity       Int
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum Frequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum SubscriptionType {
  CUSTOM
  COLLECTION
}

enum UserRole {
  USER
  ADMIN
}

enum NewsletterStatus {
  DRAFT
  SCHEDULED
  SENT
  CANCELLED
}

// Newsletter and Subscriptions
model Newsletter {
  id             String    @id @default(cuid())
  titleEn        String
  titleNo        String
  contentEn      String
  contentNo      String
  htmlTemplateEn String?   @db.Text
  htmlTemplateNo String?   @db.Text
  isTranslatedAI Boolean   @default(false)
  status         NewsletterStatus @default(DRAFT)
  scheduledFor   DateTime?
  sentAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  subscribers    NewsletterSubscription[]
}

model NewsletterSubscription {
  id        String    @id @default(cuid())
  email     String    @unique
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  isActive  Boolean   @default(true)
  locale    String    @default("no")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  newsletters Newsletter[]
}
